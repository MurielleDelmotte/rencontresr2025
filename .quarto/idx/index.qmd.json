{"title":"Truffles : une application Shiny pour cultiver ses données… et ses truffes !","markdown":{"yaml":{"title":"Truffles : une application Shiny pour cultiver ses données… et ses truffes !","format":{"thinkridentity-revealjs":{"embed-resources":true}},"author":"Murielle Delmotte","date":"last-modified","execute":{"echo":false,"eval":true}},"headingText":"Qui suis-je ?","containsRefs":false,"markdown":"\n\n\n- Développeuse R chez [ThinkR](https://thinkr.fr/)\n\n::: {.fragment}\n\n- Maman (ça aussi c'est de la gestion de projet 😅)\n\n:::\n\n::: {.fragment}\n\n- Mariée à un agriculteur 🚜\n\n:::\n\n::: {.fragment}\n### Pourquoi ce projet ?\n:::\n\n::: {.columns}\n\n\n::: {.column}\n::: {.fragment}\nMoi : \n\n- A la suite d'un workshop js mené par un collègue, je cherchais un cas d'application (pour me faire la main)\n- Sur un sujet qui ait du sens\n- Pour un projet utile et utilisé\n:::\n:::\n\n\n\n::: {.column}\n::: {.fragment}\nMon mari : \n\n- qui a une plantation de **chênes truffiers** 🌳\n- qui commencent à produire des truffes (10 ans d'attentes quand même...)\n- qui tente de mieux comprendre sa récolte \n:::\n:::\n:::\n\n::: {.fragment}\n> Et si je faisais une application Shiny ?\n:::\n\n## Définition du besoin\n\n::: {.columns}\n::: {.column} \n\n> De quoi tu as besoin ? \n\n  - Visualiser les chênes truffiers\n  - Avoir l'historique des truffes par arbre\n  - Identifier les arbres réensemencés\n  - Pouvoir ajouter une nouvelle truffe\n  - Analyser les rendements par années, par réensemençage, par type\n  - Accessible en **bottes** au milieu du champs\n\n:::\n\n::: {.column}\n\n::: {.fragment} \n\nOn fait une maquette ? \n\n![](./img/structure_app_simplify.png){width=90%}\n\n:::\n:::\n:::\n\n# Les données\n\n## Nettoyage & Structuration {.nostretch}\n\n:::: {layout=\"[ 55, 40 ]\"}\n\n::: {#first-column}\n\n### 📥 Source brute : tableur Excel (.xlsx)\n\n- Informations imbriquées :\n\n  - N° de ligne et colonne = position physique\n\n  - Cellule = type de plant + identifiant\n\n  - Couleurs = méta-informations (plante mangée, limite, etc.)\n\n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0em 0;\">\n_Étape : Structuration tabulaire _\n</blockquote>\n\n:::\n\n::: {#second-column}\n![](./img/chene_data_init.jpg){width=80%}\n:::\n\n::::\n\n\n<div style=\"margin-top: 2em;\"></div>\n\n::: {.fragment} \n\n### Génération du GeoJSON avec geojson.io\n\n  - A partir de la table structurée \n\n  - Dessiner les points pour récupérer des attributs lat, lon\n\n  - Exporter le fichier .geojson\n\n🔁 Résultat : Un fichier léger, compatible avec de nombreux outils de visualisation web ou R\n\n:::\n\n## Mise en place d'une base de données relationnelle\n\n:::: {layout=\"[ 50, 50 ]\"}\n\n::: {#first-column}\n\n### 🧱 Structure relationnelle :\n\n- `chenes` : coordonnées GPS et métadonnées de chaque chêne\n\n- `truffe` : truffes trouvées au pied d’un chêne\n\n- `reens` : historique des réensemencement (remise en culture)\n\n<div style=\"margin-top: 1em;\"></div>\n\n### 🔗 Relations clés :\n\n- chenes.idoak est la clé primaire (identifiant du chêne)\n\n- truffe.idoak et reens.idoak : clés étrangères vers chenes\n\n:::\n\n::: {#second-column}\n![](./img/schema_EA.png){width=100%}\n:::\n::::\n\n\n## Intégration dans [Supabase](https://supabase.com) \n\n:::: {layout=\"[ 40, 60 ]\"}\n\n::: {#first-column}\n\n✅ Avantages\n\n- Simple de prise en main\n\n- Open source ou auto-hébergeable\n\n- Interface web moderne (SQL, rôles, tables)\n\n- API REST auto-générée, interrogeable en R\n\n- Logs sur les usages de la BDD\n\n⚠️ Limite\n\n- Mise en veille auto sur l’offre gratuite (inactivité)\n\n\n:::\n\n::: {#second-column}\n![](./img/bdd_schema_supabase.png){width=100%}\n:::\n::::\n\n\n\n# L'approche technique\n\n## {}\n\n### 🌍 Leaflet.js : Cartographie Interactives des Arbres  {.nostretch}\n\n- **Le besoin** : Visualiser et interagir avec les chênes truffier sur une carte cliquable.\n\n- **La solution JS** : Utilisation de `Leaflet.js` pour afficher des marqueurs pour chaque arbre, avec des interactions qui permettent de récupérer le numéro du chêne cliqué.\n\n::: {.fragment} \n### 🍄 SweetAlert2 : Pop-ups Interactifs  {.nostretch}\n\n- **Le besoin** : Permettre aux utilisateurs d'ajouter des truffes via une interface conviviale, de visualiser les informations concernant un chêne truffier, ...\n\n- **La solution JS** : Intégration de `SweetAlert2` avec des formulaire HTML dans des modales et y capturer les informations nécessaires.\n:::\n\n::: {.fragment} \n### 📊 Chart.js : Visualisation des Rendements  {.nostretch}\n\n- **Le besoin** : Afficher des graphiques des rendements de truffes.\n\n- **La solution JS** : Utilisation de `Chart.js` pour générer des graphiques interactifs basés sur les données de la base.\n:::\n\n## {}\n\n### Shiny + Golem : Application R Structurée {.nostretch}\n\n:::: {layout=\"[ 80, 20 ]\"}\n\n::: {#first-column}\n\n- **Le besoin** : Disposer d'une application robuste, facilement maintenable et testable\n\n- **La solution R** : Structuration en package `{golem}` pour séparer clairement interface, logique métier dans des modules.\n:::\n::: {#second-column}\n![](./img/golem.png){width=50%}\n:::\n::::\n\n::: {.fragment}\n\n### 📱 shinyMobile : Interface adaptée au terrain {.nostretch}\n\n\n:::: {layout=\"[ 80, 20 ]\"}\n\n::: {#first-column}\n- **Le besoin** : Utiliser l’application sur smartphone directement au pied des arbres.\n\n- **La solution R** : Utilisation de `{shinyMobile}` pour une interface responsive, légère.\n:::\n::: {#second-column}\n![](./img/hex_shinyMobile.png){width=50%}\n:::\n::::\n\n\n:::\n\n::: {.fragment}\n\n> 👉 Un vrai mix R/JS\n\n:::\n\n## Fonctions métier {.nostretch}\n\n<img src=\"img/hex-truffles.png\" class=\"img-top-right\" width=\"80\">\n\n> Peu de fonctions, mais ciblées !\n\n:::: {layout=\"[ 55, 45 ]\"}\n\n::: {#first-column}\n\n\n- 📥 **Connexion** via `{DBI}`\n\n::: {.notes}\n  - connexion Supabase via `{DBI}`\n:::\n\n- 🔍 **Lecture et traitement de données**\n\n::: {.notes}\n  - récupération d'info ciblée par arbre, truffe, réensemencement…\n  - Calcul d'agrégation pour les graphiques\n\n:::\n\n\n- ✏️ **Écriture de données**  dans la BDD\n\n::: {.notes}  \n  - enregistrement d’une truffe\n  - ajout de réensemencement\n  - mise à jour d'une truffe\n:::\n\n:::\n\n\n::: {#second-column}\n\n```r\nweight_truffles_by <- function(dbtruffle, ...) {\n  check_param(dbtruffle, \"data.frame\")\n  check_names_dataframe(c(\"weight\"), dbtruffle)\n\n  dbtruffle |>\n    group_by(...) |>\n    summarise(weight = sum(weight, na.rm = TRUE), \n              .groups = \"drop\")\n}\n\n```\n:::\n::::\n\n::: {.fragment} \n✅ Simples, lisibles, maintenables  \n✅ Métier encapsulé → testable et réutilisable\n:::\n\n## Des modules golem 🧩\n\n:::: {layout=\"[ 55, 45 ]\"}\n\n::: {#first-column}\n\n> Une application découpée en briques pour plus de lisibilité\n\n\n- 📦 Utilisation des modules `{golem}` :\n  - `mod_carto_leaflet.R` : carte interactive\n  - `mod_dataviz.R` : visualisation des rendements\n\n:::\n\n::: {#second-column}\n\n<div class=\"code-smaller\">\n\n```r\napp_ui <- function(request) {\n  tagList(\n    golem_add_external_resources(),\n    f7Page(\n      f7TabLayout(\n        navbar = f7Navbar(\n          title = \"Les ch\\u00eanes truffiers\",\n          hairline = TRUE\n        ),\n        f7Tabs(\n          animated = TRUE,\n          f7Tab(\n            tabName = \"Carte\",\n            icon = f7Icon(\"map\"),\n            active = TRUE,\n            f7Card(\n              title = NULL,\n              mod_carto_leaflet_ui(\"carto_leaflet_1\")\n            )\n          ),\n          f7Tab(\n            tabName = \"Graphe\",\n            icon = f7Icon(\"graph_square\"),\n            active = FALSE,\n            f7Card(\n              title = NULL,\n              mod_dataviz_ui(\"dataviz_1\")\n            )\n          )\n        )\n      )\n    )\n  )\n}\n```\n\n</div>\n\n:::\n::::\n\n## Avec un peu de magie JS ✨\n\n> Grâce à `golem::invoke_js()`, je peux…\n\n:::: {layout=\"[ 55, 45 ]\"}\n\n::: {#first-column}\n\n- Appeler du code JavaScript depuis R\n- Déclencher des animations ou des interactions JavaScript\n- Communiquer entre R et JavaScript de manière fluide\n\n:::\n\n::: {#second-column}\n\n<div class=\"code-smaller\">\n\n```r\n# ...\n      info <- get_info(\n        dboak = global$chenes,\n        dbtruffle = global$truffe,\n        dbreensemence = global$reensemence,\n        theidoak = input$chene_click\n      )\n\n      golem::invoke_js(\n        \"modal\",\n        list(\n          id = input$chene_click,\n          type = info$chene$type,\n          date_reens = info$reensemence,\n          date_p = as.Date(info$chene$planting_date),\n          der_truf = info$truffes$last_truffle,\n          tot_weight = info$truffes$weight_tot,\n          last_comment = info$truffes$last_comment,\n          other_comments = info$truffes$other_comments\n        )\n      )\n# ...\n```\n\n</div>\n\n:::\n::::\n\n## Leaflet.js : Cartographie Interactives des Arbres  {.nostretch}\n\n:::: {layout=\"[ 50, 50 ]\"}\n\n::: {#first-column}\n\n<div class=\"code-smaller\">\n\nExtrait js:\n\n```js \n    for (var i = 0; i < locations.length; i++) {\n      marker = new L.circleMarker([locations[i].lat, locations[i].lon])\n        .unbindPopup()\n        .addTo(map)\n        .on(\"click\", onClick);\n\n      marker.id = locations[i].idoak;\n\n      if (reens === 0) {\n        if (locations[i].type === \"Normal\") {\n          marker.setStyle({\n            color: \"#FF0000\",\n            fillColor: \"#FF0000\",\n            fillOpacity: 1,\n          });\n        } else {\n          marker.setStyle({\n            color: \"#FFA500\",\n            fillColor: \"#FFA500\",\n            fillOpacity: 1,\n          });\n        }\n      } else {\n        if (locations[i].info_reens === \"1\") {\n          marker.setStyle({\n            color: \"#00AEEF\",\n            fillColor: \"#00AEEF\",\n            fillOpacity: 1,\n          });\n        } else {\n          marker.setStyle({\n            color: \"#7f9199\",\n            fillColor: \"#7f9199\",\n            fillOpacity: 1,\n          });\n        }\n      }\n    }\n```\n\n</div>\n\n:::\n\n\n::: {#second-column}\n\n::: {style=\"text-align: center\"}\n\n![](./img/app_leaftlet.png){width=50%}\n:::\n:::\n\n::::\n\n## SweetAlert2 : Pop-ups Interactifs  {.nostretch}\n\n:::: {layout=\"[ 50, 50 ]\"}\n\n::: {#first-column}\n\nExtrait js:\n\n<div class=\"code-smaller\">\n\n```js \ndocument.getElementById(\"identity\").addEventListener(\"click\", \n  () => {\n  var filledtemplateidentitycard = fillTemplate(\n    templateidentitycard,\n    arg\n  );\n\n  Swal.fire({\n    title: \"Carte d identité du chêne\",\n    html: filledtemplateidentitycard,\n    showCancelButton: false,\n    confirmButtonText: `Fermer`,\n  }).then((result) => {\n      Shiny.setInputValue(\"chene_click\", \n                          null, \n                          { priority: \"event\" });\n      openMainSwal(cheneId);\n     });\n});\n```\n\n</div>\n\n:::\n\n::: {#second-column}\nExemple template HTML :\n\n<div class=\"code-smaller\">\n```html\n<b>Identifiant : </b> {{id}}\n<hr> <b>Date de plantation : </b> {{date_p}}\n<hr> <b>Type : </b> {{type}}\n<hr> <b>Dernier Réensemencement : </b> {{date_reens}}\n<hr> <b>Dernière truffe : </b> {{der_truf}}\n<hr> <b>Poids total trouvé : </b> {{tot_weight}} g\n<hr> <b>Dernier Commentaire : </b> {{last_comment}}\n<hr> \n<details>\n  <summary><b>Autres Commentaires :</b></summary>\n  {{other_comments}}\n</details>\n```\n</div>\n\n::: {style=\"text-align: center\"}\n![](./img/identity_card.png){width=50%}\n:::\n\n:::\n\n::::\n\n\n\n## Chart.js : Visualisation des Rendements  {.nostretch}\n\n:::: {layout=\"[ 50, 50 ]\"}\n\n::: {#first-column}\n\n<div class=\"code-smaller\">\n\nExtrait js:\n```js\nShiny.addCustomMessageHandler('byyear', function(arg) {\n\nif (newChart) newChart.destroy();\n\nconst ctx = document.getElementById(arg.id);\n\nnewChart =  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: arg.labels,\n      datasets: [{\n        label: arg.label,\n        data: arg.data,\n        borderWidth: 1\n      }]\n    },\n    options: {\n      aspectRatio: 1.1, \n          responsive: true,\n          plugins: {\n            title: {\n              display: true, \n              text: arg.title\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n    }\n  });\n  })\n```\n\n</div>\n\n:::\n\n::: {#second-column}\n\n::: {style=\"text-align: center\"}\n\n![](./img/app_chartjs.png){width=50%}\n:::\n:::\n\n::::\n\n\n\n\n## 🚀 Déploiement auto sur Connect\n\n\n- 📁 Code source sur GitHub : <https://github.com/ThinkR-open/truffles/>\n  - 2 branches principales : \n    - dev : recette (sur des données fictives)\n    - main : production (sur les données clients)\n\n\n::: {.fragment} \n- 📌 Pas de Github Action pour le déploiement de l'application\n\n- 📥 Déploiement depuis Posit Connect :\n\n  - récupère le nouveau code depuis Github\n\n  - reconstruit l’environnement\n\n  - déploie automatiquement la nouvelle version\n:::\n\n\n::: {.fragment} \n- Un CI/CD pour : \n  - Check multi-plateforme\n  - Déploiement de la documentation `{pkgdown}`\n  - Prévention de l’inactivité de la base via connexion régulière\n:::\n\n# Demo\n\n<https://connect.thinkr.fr/trufflesdemo/>\n\n## {.nostretch}\n\n::: {style=\"text-align: center\"}\n![](./img/demo_truffles.gif){width=30%}\n:::\n\n::: {.notes}\nDemo : 1 minute 50\n:::\n\n\n# Et le Client ...\n\n## {}\n### Les retours \n\n⚙️ Facilité d'utilisation\n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0.5em 0;\">\n✅ _\"Ok ça va, j’ai compris comment ça marche, c'est simple !\"_\n</blockquote>\n\n🗺️ Visibilité des données\n\n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0.5em 0;\">\n✅ _\"C'est pratique de voir direct quel arbre a donné quoi\"_\n</blockquote>\n\n<div style=\"margin-top: 2em;\"></div>\n\n::: {.fragment} \n\n### Petites améliorations demandées et corrigées :\n\n  👆 Points un peu petits sur mobile \n\n  🔁 Un switchInput à déplacer pour plus d'ergonomie\n\n  💬 Les commentaires : \n  <blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0.5em 0;\">\n  _\"Finalement, je veux surtout voir le dernier commentaire\"_\n</blockquote>\n\n  🚪 Les modales : \n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0.5em 0;\">\n  _\"Ce serait bien de pouvoir passer de la carte d'identité à la déclaration d'une truffe sans être obligé de recliquer sur l'arbre\"_\n</blockquote>\n:::\n\n\n\n## {}\n\n### 🌳 Cultiver ses données… et ses idées\n\n- Cette application est née d’un besoin concret, sur le terrain et d’un désir d’apprendre.\n\n- Elle m’a permis de :\n\n  - 💡 Mettre en application et Approfondir mes compétences en JS.\n\n  - 🤝 Collaborer étroitement avec un utilisateur final… mon mari !\n\n  - 🌱 Créer un outil simple, utile et utilisé.\n\n\n<div style=\"margin-top: 1em;\"></div>\n\n::: {.fragment} \n\n### 🚀 Et la suite ?\n\n- Phase de test terrain cet hiver : boue, froid… et truffes !\n\n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0em 0;\">\n_La vraie vie commence… à la prochaine récolte_\n</blockquote>\n\n\n- Améliorations prévues :\n\n  - 📍 Intégration de la géolocalisation.\n\n  - 🔎 Mieux contrôler/sécuriser les inputs\n\n  - 🔐 Gestion des utilisateurs et des droits d'accès.\n\n  - 🧪 Aller plus loin dans les tests automatisés avec {playwright}.\n\n:::\n\n# Merci ! \n\nmurielle@thinkr.fr\n\n::: {style=\"text-align: center;\"}\n![](./img/truffes.jpg){width=60%}\n\n<span style=\"font-size: 0.6em;\">© Trufficulteurs Beauce-Val de Loire\n</span>\n\n:::\n\n","srcMarkdownNoYaml":"\n\n## Qui suis-je ?\n\n- Développeuse R chez [ThinkR](https://thinkr.fr/)\n\n::: {.fragment}\n\n- Maman (ça aussi c'est de la gestion de projet 😅)\n\n:::\n\n::: {.fragment}\n\n- Mariée à un agriculteur 🚜\n\n:::\n\n::: {.fragment}\n### Pourquoi ce projet ?\n:::\n\n::: {.columns}\n\n\n::: {.column}\n::: {.fragment}\nMoi : \n\n- A la suite d'un workshop js mené par un collègue, je cherchais un cas d'application (pour me faire la main)\n- Sur un sujet qui ait du sens\n- Pour un projet utile et utilisé\n:::\n:::\n\n\n\n::: {.column}\n::: {.fragment}\nMon mari : \n\n- qui a une plantation de **chênes truffiers** 🌳\n- qui commencent à produire des truffes (10 ans d'attentes quand même...)\n- qui tente de mieux comprendre sa récolte \n:::\n:::\n:::\n\n::: {.fragment}\n> Et si je faisais une application Shiny ?\n:::\n\n## Définition du besoin\n\n::: {.columns}\n::: {.column} \n\n> De quoi tu as besoin ? \n\n  - Visualiser les chênes truffiers\n  - Avoir l'historique des truffes par arbre\n  - Identifier les arbres réensemencés\n  - Pouvoir ajouter une nouvelle truffe\n  - Analyser les rendements par années, par réensemençage, par type\n  - Accessible en **bottes** au milieu du champs\n\n:::\n\n::: {.column}\n\n::: {.fragment} \n\nOn fait une maquette ? \n\n![](./img/structure_app_simplify.png){width=90%}\n\n:::\n:::\n:::\n\n# Les données\n\n## Nettoyage & Structuration {.nostretch}\n\n:::: {layout=\"[ 55, 40 ]\"}\n\n::: {#first-column}\n\n### 📥 Source brute : tableur Excel (.xlsx)\n\n- Informations imbriquées :\n\n  - N° de ligne et colonne = position physique\n\n  - Cellule = type de plant + identifiant\n\n  - Couleurs = méta-informations (plante mangée, limite, etc.)\n\n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0em 0;\">\n_Étape : Structuration tabulaire _\n</blockquote>\n\n:::\n\n::: {#second-column}\n![](./img/chene_data_init.jpg){width=80%}\n:::\n\n::::\n\n\n<div style=\"margin-top: 2em;\"></div>\n\n::: {.fragment} \n\n### Génération du GeoJSON avec geojson.io\n\n  - A partir de la table structurée \n\n  - Dessiner les points pour récupérer des attributs lat, lon\n\n  - Exporter le fichier .geojson\n\n🔁 Résultat : Un fichier léger, compatible avec de nombreux outils de visualisation web ou R\n\n:::\n\n## Mise en place d'une base de données relationnelle\n\n:::: {layout=\"[ 50, 50 ]\"}\n\n::: {#first-column}\n\n### 🧱 Structure relationnelle :\n\n- `chenes` : coordonnées GPS et métadonnées de chaque chêne\n\n- `truffe` : truffes trouvées au pied d’un chêne\n\n- `reens` : historique des réensemencement (remise en culture)\n\n<div style=\"margin-top: 1em;\"></div>\n\n### 🔗 Relations clés :\n\n- chenes.idoak est la clé primaire (identifiant du chêne)\n\n- truffe.idoak et reens.idoak : clés étrangères vers chenes\n\n:::\n\n::: {#second-column}\n![](./img/schema_EA.png){width=100%}\n:::\n::::\n\n\n## Intégration dans [Supabase](https://supabase.com) \n\n:::: {layout=\"[ 40, 60 ]\"}\n\n::: {#first-column}\n\n✅ Avantages\n\n- Simple de prise en main\n\n- Open source ou auto-hébergeable\n\n- Interface web moderne (SQL, rôles, tables)\n\n- API REST auto-générée, interrogeable en R\n\n- Logs sur les usages de la BDD\n\n⚠️ Limite\n\n- Mise en veille auto sur l’offre gratuite (inactivité)\n\n\n:::\n\n::: {#second-column}\n![](./img/bdd_schema_supabase.png){width=100%}\n:::\n::::\n\n\n\n# L'approche technique\n\n## {}\n\n### 🌍 Leaflet.js : Cartographie Interactives des Arbres  {.nostretch}\n\n- **Le besoin** : Visualiser et interagir avec les chênes truffier sur une carte cliquable.\n\n- **La solution JS** : Utilisation de `Leaflet.js` pour afficher des marqueurs pour chaque arbre, avec des interactions qui permettent de récupérer le numéro du chêne cliqué.\n\n::: {.fragment} \n### 🍄 SweetAlert2 : Pop-ups Interactifs  {.nostretch}\n\n- **Le besoin** : Permettre aux utilisateurs d'ajouter des truffes via une interface conviviale, de visualiser les informations concernant un chêne truffier, ...\n\n- **La solution JS** : Intégration de `SweetAlert2` avec des formulaire HTML dans des modales et y capturer les informations nécessaires.\n:::\n\n::: {.fragment} \n### 📊 Chart.js : Visualisation des Rendements  {.nostretch}\n\n- **Le besoin** : Afficher des graphiques des rendements de truffes.\n\n- **La solution JS** : Utilisation de `Chart.js` pour générer des graphiques interactifs basés sur les données de la base.\n:::\n\n## {}\n\n### Shiny + Golem : Application R Structurée {.nostretch}\n\n:::: {layout=\"[ 80, 20 ]\"}\n\n::: {#first-column}\n\n- **Le besoin** : Disposer d'une application robuste, facilement maintenable et testable\n\n- **La solution R** : Structuration en package `{golem}` pour séparer clairement interface, logique métier dans des modules.\n:::\n::: {#second-column}\n![](./img/golem.png){width=50%}\n:::\n::::\n\n::: {.fragment}\n\n### 📱 shinyMobile : Interface adaptée au terrain {.nostretch}\n\n\n:::: {layout=\"[ 80, 20 ]\"}\n\n::: {#first-column}\n- **Le besoin** : Utiliser l’application sur smartphone directement au pied des arbres.\n\n- **La solution R** : Utilisation de `{shinyMobile}` pour une interface responsive, légère.\n:::\n::: {#second-column}\n![](./img/hex_shinyMobile.png){width=50%}\n:::\n::::\n\n\n:::\n\n::: {.fragment}\n\n> 👉 Un vrai mix R/JS\n\n:::\n\n## Fonctions métier {.nostretch}\n\n<img src=\"img/hex-truffles.png\" class=\"img-top-right\" width=\"80\">\n\n> Peu de fonctions, mais ciblées !\n\n:::: {layout=\"[ 55, 45 ]\"}\n\n::: {#first-column}\n\n\n- 📥 **Connexion** via `{DBI}`\n\n::: {.notes}\n  - connexion Supabase via `{DBI}`\n:::\n\n- 🔍 **Lecture et traitement de données**\n\n::: {.notes}\n  - récupération d'info ciblée par arbre, truffe, réensemencement…\n  - Calcul d'agrégation pour les graphiques\n\n:::\n\n\n- ✏️ **Écriture de données**  dans la BDD\n\n::: {.notes}  \n  - enregistrement d’une truffe\n  - ajout de réensemencement\n  - mise à jour d'une truffe\n:::\n\n:::\n\n\n::: {#second-column}\n\n```r\nweight_truffles_by <- function(dbtruffle, ...) {\n  check_param(dbtruffle, \"data.frame\")\n  check_names_dataframe(c(\"weight\"), dbtruffle)\n\n  dbtruffle |>\n    group_by(...) |>\n    summarise(weight = sum(weight, na.rm = TRUE), \n              .groups = \"drop\")\n}\n\n```\n:::\n::::\n\n::: {.fragment} \n✅ Simples, lisibles, maintenables  \n✅ Métier encapsulé → testable et réutilisable\n:::\n\n## Des modules golem 🧩\n\n:::: {layout=\"[ 55, 45 ]\"}\n\n::: {#first-column}\n\n> Une application découpée en briques pour plus de lisibilité\n\n\n- 📦 Utilisation des modules `{golem}` :\n  - `mod_carto_leaflet.R` : carte interactive\n  - `mod_dataviz.R` : visualisation des rendements\n\n:::\n\n::: {#second-column}\n\n<div class=\"code-smaller\">\n\n```r\napp_ui <- function(request) {\n  tagList(\n    golem_add_external_resources(),\n    f7Page(\n      f7TabLayout(\n        navbar = f7Navbar(\n          title = \"Les ch\\u00eanes truffiers\",\n          hairline = TRUE\n        ),\n        f7Tabs(\n          animated = TRUE,\n          f7Tab(\n            tabName = \"Carte\",\n            icon = f7Icon(\"map\"),\n            active = TRUE,\n            f7Card(\n              title = NULL,\n              mod_carto_leaflet_ui(\"carto_leaflet_1\")\n            )\n          ),\n          f7Tab(\n            tabName = \"Graphe\",\n            icon = f7Icon(\"graph_square\"),\n            active = FALSE,\n            f7Card(\n              title = NULL,\n              mod_dataviz_ui(\"dataviz_1\")\n            )\n          )\n        )\n      )\n    )\n  )\n}\n```\n\n</div>\n\n:::\n::::\n\n## Avec un peu de magie JS ✨\n\n> Grâce à `golem::invoke_js()`, je peux…\n\n:::: {layout=\"[ 55, 45 ]\"}\n\n::: {#first-column}\n\n- Appeler du code JavaScript depuis R\n- Déclencher des animations ou des interactions JavaScript\n- Communiquer entre R et JavaScript de manière fluide\n\n:::\n\n::: {#second-column}\n\n<div class=\"code-smaller\">\n\n```r\n# ...\n      info <- get_info(\n        dboak = global$chenes,\n        dbtruffle = global$truffe,\n        dbreensemence = global$reensemence,\n        theidoak = input$chene_click\n      )\n\n      golem::invoke_js(\n        \"modal\",\n        list(\n          id = input$chene_click,\n          type = info$chene$type,\n          date_reens = info$reensemence,\n          date_p = as.Date(info$chene$planting_date),\n          der_truf = info$truffes$last_truffle,\n          tot_weight = info$truffes$weight_tot,\n          last_comment = info$truffes$last_comment,\n          other_comments = info$truffes$other_comments\n        )\n      )\n# ...\n```\n\n</div>\n\n:::\n::::\n\n## Leaflet.js : Cartographie Interactives des Arbres  {.nostretch}\n\n:::: {layout=\"[ 50, 50 ]\"}\n\n::: {#first-column}\n\n<div class=\"code-smaller\">\n\nExtrait js:\n\n```js \n    for (var i = 0; i < locations.length; i++) {\n      marker = new L.circleMarker([locations[i].lat, locations[i].lon])\n        .unbindPopup()\n        .addTo(map)\n        .on(\"click\", onClick);\n\n      marker.id = locations[i].idoak;\n\n      if (reens === 0) {\n        if (locations[i].type === \"Normal\") {\n          marker.setStyle({\n            color: \"#FF0000\",\n            fillColor: \"#FF0000\",\n            fillOpacity: 1,\n          });\n        } else {\n          marker.setStyle({\n            color: \"#FFA500\",\n            fillColor: \"#FFA500\",\n            fillOpacity: 1,\n          });\n        }\n      } else {\n        if (locations[i].info_reens === \"1\") {\n          marker.setStyle({\n            color: \"#00AEEF\",\n            fillColor: \"#00AEEF\",\n            fillOpacity: 1,\n          });\n        } else {\n          marker.setStyle({\n            color: \"#7f9199\",\n            fillColor: \"#7f9199\",\n            fillOpacity: 1,\n          });\n        }\n      }\n    }\n```\n\n</div>\n\n:::\n\n\n::: {#second-column}\n\n::: {style=\"text-align: center\"}\n\n![](./img/app_leaftlet.png){width=50%}\n:::\n:::\n\n::::\n\n## SweetAlert2 : Pop-ups Interactifs  {.nostretch}\n\n:::: {layout=\"[ 50, 50 ]\"}\n\n::: {#first-column}\n\nExtrait js:\n\n<div class=\"code-smaller\">\n\n```js \ndocument.getElementById(\"identity\").addEventListener(\"click\", \n  () => {\n  var filledtemplateidentitycard = fillTemplate(\n    templateidentitycard,\n    arg\n  );\n\n  Swal.fire({\n    title: \"Carte d identité du chêne\",\n    html: filledtemplateidentitycard,\n    showCancelButton: false,\n    confirmButtonText: `Fermer`,\n  }).then((result) => {\n      Shiny.setInputValue(\"chene_click\", \n                          null, \n                          { priority: \"event\" });\n      openMainSwal(cheneId);\n     });\n});\n```\n\n</div>\n\n:::\n\n::: {#second-column}\nExemple template HTML :\n\n<div class=\"code-smaller\">\n```html\n<b>Identifiant : </b> {{id}}\n<hr> <b>Date de plantation : </b> {{date_p}}\n<hr> <b>Type : </b> {{type}}\n<hr> <b>Dernier Réensemencement : </b> {{date_reens}}\n<hr> <b>Dernière truffe : </b> {{der_truf}}\n<hr> <b>Poids total trouvé : </b> {{tot_weight}} g\n<hr> <b>Dernier Commentaire : </b> {{last_comment}}\n<hr> \n<details>\n  <summary><b>Autres Commentaires :</b></summary>\n  {{other_comments}}\n</details>\n```\n</div>\n\n::: {style=\"text-align: center\"}\n![](./img/identity_card.png){width=50%}\n:::\n\n:::\n\n::::\n\n\n\n## Chart.js : Visualisation des Rendements  {.nostretch}\n\n:::: {layout=\"[ 50, 50 ]\"}\n\n::: {#first-column}\n\n<div class=\"code-smaller\">\n\nExtrait js:\n```js\nShiny.addCustomMessageHandler('byyear', function(arg) {\n\nif (newChart) newChart.destroy();\n\nconst ctx = document.getElementById(arg.id);\n\nnewChart =  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: arg.labels,\n      datasets: [{\n        label: arg.label,\n        data: arg.data,\n        borderWidth: 1\n      }]\n    },\n    options: {\n      aspectRatio: 1.1, \n          responsive: true,\n          plugins: {\n            title: {\n              display: true, \n              text: arg.title\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n    }\n  });\n  })\n```\n\n</div>\n\n:::\n\n::: {#second-column}\n\n::: {style=\"text-align: center\"}\n\n![](./img/app_chartjs.png){width=50%}\n:::\n:::\n\n::::\n\n\n\n\n## 🚀 Déploiement auto sur Connect\n\n\n- 📁 Code source sur GitHub : <https://github.com/ThinkR-open/truffles/>\n  - 2 branches principales : \n    - dev : recette (sur des données fictives)\n    - main : production (sur les données clients)\n\n\n::: {.fragment} \n- 📌 Pas de Github Action pour le déploiement de l'application\n\n- 📥 Déploiement depuis Posit Connect :\n\n  - récupère le nouveau code depuis Github\n\n  - reconstruit l’environnement\n\n  - déploie automatiquement la nouvelle version\n:::\n\n\n::: {.fragment} \n- Un CI/CD pour : \n  - Check multi-plateforme\n  - Déploiement de la documentation `{pkgdown}`\n  - Prévention de l’inactivité de la base via connexion régulière\n:::\n\n# Demo\n\n<https://connect.thinkr.fr/trufflesdemo/>\n\n## {.nostretch}\n\n::: {style=\"text-align: center\"}\n![](./img/demo_truffles.gif){width=30%}\n:::\n\n::: {.notes}\nDemo : 1 minute 50\n:::\n\n\n# Et le Client ...\n\n## {}\n### Les retours \n\n⚙️ Facilité d'utilisation\n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0.5em 0;\">\n✅ _\"Ok ça va, j’ai compris comment ça marche, c'est simple !\"_\n</blockquote>\n\n🗺️ Visibilité des données\n\n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0.5em 0;\">\n✅ _\"C'est pratique de voir direct quel arbre a donné quoi\"_\n</blockquote>\n\n<div style=\"margin-top: 2em;\"></div>\n\n::: {.fragment} \n\n### Petites améliorations demandées et corrigées :\n\n  👆 Points un peu petits sur mobile \n\n  🔁 Un switchInput à déplacer pour plus d'ergonomie\n\n  💬 Les commentaires : \n  <blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0.5em 0;\">\n  _\"Finalement, je veux surtout voir le dernier commentaire\"_\n</blockquote>\n\n  🚪 Les modales : \n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0.5em 0;\">\n  _\"Ce serait bien de pouvoir passer de la carte d'identité à la déclaration d'une truffe sans être obligé de recliquer sur l'arbre\"_\n</blockquote>\n:::\n\n\n\n## {}\n\n### 🌳 Cultiver ses données… et ses idées\n\n- Cette application est née d’un besoin concret, sur le terrain et d’un désir d’apprendre.\n\n- Elle m’a permis de :\n\n  - 💡 Mettre en application et Approfondir mes compétences en JS.\n\n  - 🤝 Collaborer étroitement avec un utilisateur final… mon mari !\n\n  - 🌱 Créer un outil simple, utile et utilisé.\n\n\n<div style=\"margin-top: 1em;\"></div>\n\n::: {.fragment} \n\n### 🚀 Et la suite ?\n\n- Phase de test terrain cet hiver : boue, froid… et truffes !\n\n<blockquote style=\"font-size: 0.9em; border-left: 3px solid #ccc; padding-left: 10px; margin: 0em 0;\">\n_La vraie vie commence… à la prochaine récolte_\n</blockquote>\n\n\n- Améliorations prévues :\n\n  - 📍 Intégration de la géolocalisation.\n\n  - 🔎 Mieux contrôler/sécuriser les inputs\n\n  - 🔐 Gestion des utilisateurs et des droits d'accès.\n\n  - 🧪 Aller plus loin dans les tests automatisés avec {playwright}.\n\n:::\n\n# Merci ! \n\nmurielle@thinkr.fr\n\n::: {style=\"text-align: center;\"}\n![](./img/truffes.jpg){width=60%}\n\n<span style=\"font-size: 0.6em;\">© Trufficulteurs Beauce-Val de Loire\n</span>\n\n:::\n\n"},"formats":{"thinkridentity-revealjs":{"identifier":{"display-name":"RevealJS","target-format":"thinkridentity-revealjs","base-format":"revealjs","extension-name":"thinkridentity"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":[],"embed-resources":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.4.550","auto-stretch":true,"menu":{"titleSelector":"h1","useTextContentForMissingTitles":false,"hideMissingTitles":true},"slideNumber":true,"theme":["default","_extensions/ThinkR-open/thinkridentity/thinkridentity.scss"],"logo":"_extensions/ThinkR-open/thinkridentity/logo.png","footer":"**<i class=\"las la-book\"></i> {{< meta title >}}** |\nRetrouvez nous sur <https://thinkr.fr>\n","title-slide-attributes":{"data-background-image":"_extensions/ThinkR-open/thinkridentity/background.png"},"code-annotations":"hover","chalkboard":false,"revealjs-plugins":[],"title":"Truffles : une application Shiny pour cultiver ses données… et ses truffes !","author":"Murielle Delmotte","date":"last-modified"}}},"projectFormats":[]}